<?php

namespace shop\repositories;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use shop\entities\User\User;
use shop\repositories\Interfaces\IUserRepository;
use shop\Services\User\Role;

/**
 * DoctrineUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DoctrineUserRepository implements IUserRepository
{
    private $em;
    private $entityRepository;

    public function __construct(EntityManager $em, EntityRepository $entityRepository){
        $this->em = $em;
        $this->entityRepository = $entityRepository;
    }

    public function get($id){
        /** @var User $user */
        if(!$user = $this->entityRepository->find($id)){
            throw new NotFoundException('User not found.');
        }

        return $user;
    }

    /**
     * @param string $email
     * @return User
     * @throws NotFoundException
     */
    public function getByEmail($email){
        $user = $this->entityRepository->findOneBy(['email' => $email]);
        if(is_null($user)){
            throw new NotFoundException('User not found.');
        }

        /** @var User $user */
        return $user;
    }

    public function add(User $user){
        if(!is_null($this->entityRepository->findOneBy(['email' => $user->getEmail()]))){
            throw new UserDoubleException();
        }

        $roleService = new Role($this->em);

        $user->setRole($roleService->getByName($user->getRole()->getName()));

        $this->em->persist($user);
        $this->em->flush($user);
    }

    public function save(User $user){
        $this->em->flush($user);
    }

    public function remove(User $user){
        $this->em->remove($user);
        $this->em->flush($user);
    }

    public function getAll()
    {
        /** @var User[] $users */
        if (!$users = $this->entityRepository->findAll()) {
            throw new NotFoundException('Users not found.');
        }
        return $users;
    }
}
